<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>iamsimate</title>
  
  <subtitle>司马特的博客</subtitle>
  <link href="http://iamsimate.github.io/atom.xml" rel="self"/>
  
  <link href="http://iamsimate.github.io/"/>
  <updated>2022-11-11T03:42:14.392Z</updated>
  <id>http://iamsimate.github.io/</id>
  
  <author>
    <name>HE JIAYI</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>self introduction by Xu Hui</title>
    <link href="http://iamsimate.github.io/2022/11/11/self%20introduction%20by%20Xu%20Hui/"/>
    <id>http://iamsimate.github.io/2022/11/11/self%20introduction%20by%20Xu%20Hui/</id>
    <published>2022-11-11T10:04:51.000Z</published>
    <updated>2022-11-11T03:42:14.392Z</updated>
    
    <content type="html"><![CDATA[<video src="/2022/11/11/self introduction by Xu Hui/1.mp4" position="absolute" width="100%" height="100%" controls="controls"></video>]]></content>
    
    
      
      
    <summary type="html">&lt;video src=&quot;/2022/11/11/self introduction by Xu Hui/1.mp4&quot; position=&quot;absolute&quot; width=&quot;100%&quot; height=&quot;100%&quot; controls=&quot;controls&quot;&gt;
&lt;/video&gt;
</summary>
      
    
    
    
    <category term="阅读" scheme="http://iamsimate.github.io/categories/%E9%98%85%E8%AF%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>偏微分方程</title>
    <link href="http://iamsimate.github.io/2022/10/16/%E5%81%8F%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/"/>
    <id>http://iamsimate.github.io/2022/10/16/%E5%81%8F%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/</id>
    <published>2022-10-16T06:21:37.000Z</published>
    <updated>2022-10-16T06:24:05.098Z</updated>
    
    <content type="html"><![CDATA[<p><!-- 在线显示PDF --></p><p><!-- 第一种方式，可调整pdf显示的大小，比较灵活 --><embed src="./偏微分方程.pdf" width="100%" height="750" type="application/pdf"></p><p><!-- 第二种方式 --> <!-- <div class="row">    <embed src="./偏微分方程.pdf" width="100%" height="550" type="application/pdf"></div> --&gt;</p><hr />]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;!-- 在线显示PDF --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 第一种方式，可调整pdf显示的大小，比较灵活 --&gt;
&lt;embed src=&quot;./偏微分方程.pdf&quot; width=&quot;100%&quot; height=&quot;750&quot; type=&quot;application/pdf&quot;&gt;&lt;/p&gt;</summary>
      
    
    
    
    <category term="阅读" scheme="http://iamsimate.github.io/categories/%E9%98%85%E8%AF%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>我的第一篇文章</title>
    <link href="http://iamsimate.github.io/2022/07/14/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <id>http://iamsimate.github.io/2022/07/14/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</id>
    <published>2022-07-14T10:04:51.000Z</published>
    <updated>2022-11-17T10:42:03.715Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>大家好，今后将开始我的新学习之路，花费两天时间终于解决了基本问题，搭建好了简陋的博客，之后会将学习笔记陆续搬到网站上，公众号也会同步更新。</p><h2id="如何制作博客以及将博客部署到github上">如何制作博客以及将博客部署到github上</h2><p>我基本上是在csdn上找的教程，其中一些文件的代码修改我并不太懂，回忆搭建过程也是坎坷零星，如果后面有时间，把我搭建过程中遇到的问题整理整理。以下是参考链接（全在我的主页收藏夹里了）:https://blog.csdn.net/m0_46488303?type=collect</p><script type="text/javascript" src="//cdn.datacamp.com/dcl-react.js.gz"></script><div data-datacamp-exercise="" data-lang="python"><pre><code>&lt;code data-type=&quot;pre-exercise-code&quot;&gt;    # 这部分代码是在初始化的时候自动运行的    b = 6&lt;/code&gt;&lt;code data-type=&quot;sample-code&quot;&gt;    # 这里是示例代码    # Print out a&lt;/code&gt;&lt;code data-type=&quot;solution&quot;&gt;    # 这里是答案    a &lt;- 5    # Print out a    print(a)&lt;/code&gt;&lt;code data-type=&quot;sct&quot;&gt;    test_object(&quot;a&quot;)    test_function(&quot;print&quot;)    success_msg(&quot;Great job!&quot;)&lt;/code&gt;&lt;div data-type=&quot;hint&quot;&gt;Use the assignment operator (code&lt;-&lt;/code&gt;) to create the variable codea&lt;/code&gt;.&lt;/div&gt;</code></pre></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;大家好，今后将开始我的新学习之路，花费两天时间终于解决了基本问题，搭建好了简陋的博客，之后会将学习笔记陆续搬到网站上，公众号也会同步更新。&lt;/p&gt;
&lt;h2
id=&quot;如何制作博客以及将博客部署到github上&quot;&gt;如何制作博客以及将</summary>
      
    
    
    
    <category term="技术" scheme="http://iamsimate.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>泛函分析</title>
    <link href="http://iamsimate.github.io/2022/07/14/%E6%B3%9B%E5%87%BD%E5%88%86%E6%9E%90/"/>
    <id>http://iamsimate.github.io/2022/07/14/%E6%B3%9B%E5%87%BD%E5%88%86%E6%9E%90/</id>
    <published>2022-07-14T10:04:51.000Z</published>
    <updated>2022-10-03T08:33:23.039Z</updated>
    
    <content type="html"><![CDATA[<p><!-- 在线显示PDF --></p><p><!-- 第一种方式，可调整pdf显示的大小，比较灵活 --><embed src="./泛函分析.pdf" width="100%" height="750" type="application/pdf"></p><p><!-- 第二种方式 --> <!-- <div class="row">    <embed src="./泛函分析.pdf" width="100%" height="550" type="application/pdf"></div> --&gt;</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;!-- 在线显示PDF --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 第一种方式，可调整pdf显示的大小，比较灵活 --&gt;
&lt;embed src=&quot;./泛函分析.pdf&quot; width=&quot;100%&quot; height=&quot;750&quot; type=&quot;application/pdf&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="阅读" scheme="http://iamsimate.github.io/categories/%E9%98%85%E8%AF%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>heart</title>
    <link href="http://iamsimate.github.io/2022/07/14/heart/heart/"/>
    <id>http://iamsimate.github.io/2022/07/14/heart/heart/</id>
    <published>2022-07-14T10:04:51.000Z</published>
    <updated>2022-11-17T11:11:00.722Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="/js/test.js"></script>&lt;!DOCTYPE html&gt;<html><head><title></title><script src="js/jquery.min.js"></script></head><style>    * {      padding: 0;      margin: 0;    }    html,    body {      height: 100%;      padding: 0;      margin: 0;      background: #000;    }     .aa {      position: fixed;      left: 50%;      bottom: 10px;      color: #ccc;    }     .container {      width: 100%;      height: 100%;    }    canvas {      z-index: 99;      position: absolute;      width: 100%;      height: 100%;    }  </style><body><!-- 樱花 --><div id="jsi-cherry-container" class="container"><pre><code>  &lt;audio autoplay=&quot;autopaly&quot;&gt;    &lt;source src=&quot;renxi.mp3&quot; type=&quot;audio/mp3&quot; /&gt;  &lt;/audio&gt;  &lt;img class=&quot;img&quot; src=&quot;./123.png&quot; alt=&quot;&quot; /&gt;  &lt;!-- 爱心 --&gt;  &lt;canvas id=&quot;pinkboard&quot; class=&quot;container&quot;&gt; &lt;/canvas&gt;&lt;/div&gt;</code></pre></body></html><script>    /*     * Settings     */    var settings = {      particles: {        length: 500, // maximum amount of particles        duration: 2, // particle duration in sec        velocity: 100, // particle velocity in pixels/sec        effect: -0.75, // play with this for a nice effect        size: 30, // particle size in pixels      },    };     (function () {      var b = 0;      var c = ["ms", "moz", "webkit", "o"];      for (var a = 0; a < c.length && !window.requestAnimationFrame; ++a) {        window.requestAnimationFrame = window[c[a] + "RequestAnimationFrame"];        window.cancelAnimationFrame =          window[c[a] + "CancelAnimationFrame"] ||          window[c[a] + "CancelRequestAnimationFrame"];      }      if (!window.requestAnimationFrame) {        window.requestAnimationFrame = function (h, e) {          var d = new Date().getTime();          var f = Math.max(0, 16 - (d - b));          var g = window.setTimeout(function () {            h(d + f);          }, f);          b = d + f;          return g;        };      }      if (!window.cancelAnimationFrame) {        window.cancelAnimationFrame = function (d) {          clearTimeout(d);        };      }    })();     /*     * Point class     */    var Point = (function () {      function Point(x, y) {        this.x = typeof x !== "undefined" ? x : 0;        this.y = typeof y !== "undefined" ? y : 0;      }      Point.prototype.clone = function () {        return new Point(this.x, this.y);      };      Point.prototype.length = function (length) {        if (typeof length == "undefined")          return Math.sqrt(this.x * this.x + this.y * this.y);        this.normalize();        this.x *= length;        this.y *= length;        return this;      };      Point.prototype.normalize = function () {        var length = this.length();        this.x /= length;        this.y /= length;        return this;      };      return Point;    })();     /*     * Particle class     */    var Particle = (function () {      function Particle() {        this.position = new Point();        this.velocity = new Point();        this.acceleration = new Point();        this.age = 0;      }      Particle.prototype.initialize = function (x, y, dx, dy) {        this.position.x = x;        this.position.y = y;        this.velocity.x = dx;        this.velocity.y = dy;        this.acceleration.x = dx * settings.particles.effect;        this.acceleration.y = dy * settings.particles.effect;        this.age = 0;      };      Particle.prototype.update = function (deltaTime) {        this.position.x += this.velocity.x * deltaTime;        this.position.y += this.velocity.y * deltaTime;        this.velocity.x += this.acceleration.x * deltaTime;        this.velocity.y += this.acceleration.y * deltaTime;        this.age += deltaTime;      };      Particle.prototype.draw = function (context, image) {        function ease(t) {          return --t * t * t + 1;        }        var size = image.width * ease(this.age / settings.particles.duration);        context.globalAlpha = 1 - this.age / settings.particles.duration;        context.drawImage(          image,          this.position.x - size / 2,          this.position.y - size / 2,          size,          size        );      };      return Particle;    })();     /*     * ParticlePool class     */    var ParticlePool = (function () {      var particles,        firstActive = 0,        firstFree = 0,        duration = settings.particles.duration;       function ParticlePool(length) {        // create and populate particle pool        particles = new Array(length);        for (var i = 0; i < particles.length; i++)          particles[i] = new Particle();      }      ParticlePool.prototype.add = function (x, y, dx, dy) {        particles[firstFree].initialize(x, y, dx, dy);         // handle circular queue        firstFree++;        if (firstFree == particles.length) firstFree = 0;        if (firstActive == firstFree) firstActive++;        if (firstActive == particles.length) firstActive = 0;      };      ParticlePool.prototype.update = function (deltaTime) {        var i;         // update active particles        if (firstActive < firstFree) {          for (i = firstActive; i < firstFree; i++)            particles[i].update(deltaTime);        }        if (firstFree < firstActive) {          for (i = firstActive; i < particles.length; i++)            particles[i].update(deltaTime);          for (i = 0; i < firstFree; i++) particles[i].update(deltaTime);        }         // remove inactive particles        while (          particles[firstActive].age >= duration &&          firstActive != firstFree        ) {          firstActive++;          if (firstActive == particles.length) firstActive = 0;        }      };      ParticlePool.prototype.draw = function (context, image) {        // draw active particles        if (firstActive < firstFree) {          for (i = firstActive; i < firstFree; i++)            particles[i].draw(context, image);        }        if (firstFree < firstActive) {          for (i = firstActive; i < particles.length; i++)            particles[i].draw(context, image);          for (i = 0; i < firstFree; i++) particles[i].draw(context, image);        }      };      return ParticlePool;    })();     /*     * Putting it all together     */    (function (canvas) {      var context = canvas.getContext("2d"),        particles = new ParticlePool(settings.particles.length),        particleRate =          settings.particles.length / settings.particles.duration, // particles/sec        time;       // get point on heart with -PI <= t <= PI      function pointOnHeart(t) {        return new Point(          160 * Math.pow(Math.sin(t), 3),          130 * Math.cos(t) -            50 * Math.cos(2 * t) -            20 * Math.cos(3 * t) -            10 * Math.cos(4 * t) +            25        );      }       // creating the particle image using a dummy canvas      var image = (function () {        var canvas = document.createElement("canvas"),          context = canvas.getContext("2d");        canvas.width = settings.particles.size;        canvas.height = settings.particles.size;        // helper function to create the path        function to(t) {          var point = pointOnHeart(t);          point.x =            settings.particles.size / 2 +            (point.x * settings.particles.size) / 350;          point.y =            settings.particles.size / 2 -            (point.y * settings.particles.size) / 350;          return point;        }        // create the path        context.beginPath();        var t = -Math.PI;        var point = to(t);        context.moveTo(point.x, point.y);        while (t < Math.PI) {          t += 0.01; // baby steps!          point = to(t);          context.lineTo(point.x, point.y);        }        context.closePath();        // create the fill        context.fillStyle = "#ea80b0";        context.fill();        // create the image        var image = new Image();        image.src = canvas.toDataURL();        return image;      })();       // render that thing!      function render() {        // next animation frame        requestAnimationFrame(render);         // update time        var newTime = new Date().getTime() / 1000,          deltaTime = newTime - (time || newTime);        time = newTime;         // clear canvas        context.clearRect(0, 0, canvas.width, canvas.height);         // create new particles        var amount = particleRate * deltaTime;        for (var i = 0; i < amount; i++) {          var pos = pointOnHeart(Math.PI - 2 * Math.PI * Math.random());          var dir = pos.clone().length(settings.particles.velocity);          particles.add(            canvas.width / 2 + pos.x,            canvas.height / 2 - pos.y,            dir.x,            -dir.y          );        }         // update and draw particles        particles.update(deltaTime);        particles.draw(context, image);      }       // handle (re-)sizing of the canvas      function onResize() {        canvas.width = canvas.clientWidth;        canvas.height = canvas.clientHeight;      }      window.onresize = onResize;       // delay rendering bootstrap      setTimeout(function () {        onResize();        render();      }, 10);    })(document.getElementById("pinkboard"));  </script><script>    var RENDERER = {      INIT_CHERRY_BLOSSOM_COUNT: 30,      MAX_ADDING_INTERVAL: 10,       init: function () {        this.setParameters();        this.reconstructMethods();        this.createCherries();        this.render();        if (          navigator.userAgent.match(            /(phone|pod|iPhone|iPod|ios|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i          )        ) {          // var box = document.querySelectorAll(".box")[0];          // console.log(box, "移动端");          // box.style.marginTop = "65%";        }      },      setParameters: function () {        this.$container = $("#jsi-cherry-container");        this.width = this.$container.width();        this.height = this.$container.height();        this.context = $("<canvas />")          .attr({ width: this.width, height: this.height })          .appendTo(this.$container)          .get(0)        var rate = this.FOCUS_POSITION / (this.z + this.FOCUS_POSITION),          x = this.renderer.width / 2 + this.x * rate,          y = this.renderer.height / 2 - this.y * rate;        return { rate: rate, x: x, y: y };      },      re          }        } else {          this.phi += Math.PI / (axis.y == this.thresholdY ? 200 : 500);          this.phi %= Math.PI;        }        if (this.y <= -this.renderer.height * this.SURFACE_RATE) {          this.x += 2;          this.y = -this.renderer.height * this.SURFACE_RATE;        } else {          this.x += this.vx;          this.y += this.vy;        }        return (          this.z > -this.FOCUS_POSITION &&          this.z < this.FAR_LIMIT &&          this.x < this.renderer.width * 1.5        );      },    };    $(function () {      RENDERER.init();    });  </script>]]></content>
    
    
      
      
    <summary type="html">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/test.js&quot;&gt;&lt;/script&gt;
&amp;lt;!DOCTYPE html&amp;gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;
&lt;/title&gt;
&lt;script src=&quot;js/jquery</summary>
      
    
    
    
    <category term="技术" scheme="http://iamsimate.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
</feed>
